package poly.edu.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.*;
import poly.edu.dao.AccountDAO;
import poly.edu.model.Account;

import java.time.LocalDateTime;
import java.util.Optional;

@Controller
@RequestMapping("/account")
public class AccountController {

    @Autowired
    private AccountDAO accountDAO;

    // ================== Trang t√†i kho·∫£n ch√≠nh ==================
    @GetMapping
    public String accountPage(HttpSession session, Model model) {
        Account loggedIn = (Account) session.getAttribute("user");
        if (loggedIn == null) {
            return "redirect:/account/login";
        }
        model.addAttribute("account", loggedIn);
        return "poly/taikhoan/account";
    }

    // ================== Trang ƒëƒÉng nh·∫≠p & ƒëƒÉng k√Ω (tab chung) ==================
    @GetMapping("/login")
    public String loginPage(HttpServletRequest request, Model model) {
        // Ki·ªÉm tra cookie remember-me
        String rememberedUser = null;
        for (Cookie c : Optional.ofNullable(request.getCookies()).orElse(new Cookie[0])) {
            if (c.getName().equals("remember-username")) {
                rememberedUser = c.getValue();
                break;
            }
        }
        model.addAttribute("rememberedUser", rememberedUser);
        model.addAttribute("account", new Account());
        return "poly/taikhoan/login-register"; // üëâ g·ªôp chung login + register
    }

    // ================== ƒêƒÉng nh·∫≠p ==================
    @PostMapping("/login")
    public String login(
            @RequestParam String username,
            @RequestParam String password,
            @RequestParam(required = false) String remember,
            HttpServletResponse response,
            HttpSession session,
            Model model) {

        Optional<Account> opt = accountDAO.findByUsername(username);
        if (opt.isEmpty()) {
            model.addAttribute("error", "‚ùå T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!");
            return "poly/taikhoan/login-register";
        }

        Account acc = opt.get();
        if (!acc.getPassword().equals(password)) {
            model.addAttribute("error", "‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
            return "poly/taikhoan/login-register";
        }

        if (!acc.getActive()) {
            model.addAttribute("error", "‚ùå T√†i kho·∫£n ƒë√£ b·ªã kh√≥a!");
            return "poly/taikhoan/login-register";
        }

        // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
        session.setAttribute("user", acc);

        // X·ª≠ l√Ω ghi nh·ªõ ƒëƒÉng nh·∫≠p
        if (remember != null) {
            Cookie cookie = new Cookie("remember-username", username);
            cookie.setMaxAge(10 * 24 * 60 * 60); // 10 ng√†y
            cookie.setPath("/");
            response.addCookie(cookie);
        } else {
            Cookie cookie = new Cookie("remember-username", null);
            cookie.setMaxAge(0);
            cookie.setPath("/");
            response.addCookie(cookie);
        }

        return "redirect:/account";
    }

    // ================== ƒêƒÉng k√Ω ==================
    @PostMapping("/register")
    public String register(@ModelAttribute("account") Account account, Model model) {
        if (accountDAO.findByUsername(account.getUsername()).isPresent()) {
            model.addAttribute("error", "‚ùå T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!");
            return "poly/taikhoan/login-register";
        }
        if (accountDAO.findByEmail(account.getEmail()).isPresent()) {
            model.addAttribute("error", "‚ùå Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
            return "poly/taikhoan/login-register";
        }

        account.setActive(true);
        account.setCreatedAt(LocalDateTime.now());
        accountDAO.save(account);

        model.addAttribute("message", "‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p.");
        return "poly/taikhoan/login-register";
    }

    // ================== ƒêƒÉng xu·∫•t ==================
    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/account/login";
    }
    
 // ================== C·∫≠p nh·∫≠t th√¥ng tin ==================
    @GetMapping("/update")
    public String updatePage(HttpSession session, Model model) {
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ session
        Account user = (Account) session.getAttribute("user");
        if (user == null) {
            return "redirect:/account/login";
        }

        model.addAttribute("account", user);
        return "poly/taikhoan/update-account";
    }

    @PostMapping("/update")
    public String updateAccount(@ModelAttribute("account") Account formAccount,
                                HttpSession session,
                                Model model) {

        // L·∫•y t√†i kho·∫£n hi·ªán t·∫°i t·ª´ session
        Account currentUser = (Account) session.getAttribute("user");
        if (currentUser == null) {
            return "redirect:/account/login";
        }

        try {
            // ====== Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i (tr·ª´ ch√≠nh t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p) ======
            Optional<Account> existingEmail = accountDAO.findByEmail(formAccount.getEmail());
            if (existingEmail.isPresent() && 
                !existingEmail.get().getUsername().equals(currentUser.getUsername())) {
                
                model.addAttribute("error", "‚ùå Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c!");
                model.addAttribute("account", currentUser);
                return "poly/taikhoan/update-account";
            }

            // ====== C·∫≠p nh·∫≠t c√°c th√¥ng tin h·ª£p l·ªá ======
            currentUser.setEmail(formAccount.getEmail());
            currentUser.setFullName(formAccount.getFullName());

            // Gi·ªØ nguy√™n c√°c gi√° tr·ªã quan tr·ªçng
            currentUser.setActive(currentUser.getActive());
            currentUser.setPassword(currentUser.getPassword());
            currentUser.setCreatedAt(currentUser.getCreatedAt());

            // ====== L∆∞u v√†o database ======
            accountDAO.save(currentUser);

            // ====== C·∫≠p nh·∫≠t l·∫°i session ======
            session.setAttribute("user", currentUser);

            model.addAttribute("account", currentUser);
            model.addAttribute("message", "‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");

        } catch (Exception e) {
            model.addAttribute("error", "‚ùå L·ªói khi c·∫≠p nh·∫≠t: " + e.getMessage());
            model.addAttribute("account", formAccount);
        }

        return "poly/taikhoan/update-account";
    }


    // ================== ƒê·ªïi m·∫≠t kh·∫©u ==================
    @GetMapping("/doiMatKhau")
    public String doiMatKhauForm() {
        return "poly/taikhoan/doiMatKhau"; 
    }

    @PostMapping("/doiMatKhau")
    public String doiMatKhau(
            @RequestParam String oldPassword,
            @RequestParam String newPassword,
            @RequestParam String confirmPassword,
            Model model) {

        if (!newPassword.equals(confirmPassword)) {
            model.addAttribute("error", "‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            return "poly/taikhoan/doiMatKhau";
        }

        // TODO: ki·ªÉm tra oldPassword trong DB
        model.addAttribute("message", "‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
        return "poly/taikhoan/doiMatKhau";
    }
}
